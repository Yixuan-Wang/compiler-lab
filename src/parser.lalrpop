use crate::front::ast::*;

grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*[^*]*(\*([^*/][^*]*)?)*\*/" => {},
    _
}

// r"//([^!\n\r][^\n\r]*[\n\r]*)+" => {},

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T> => {
        v.push(e);
        v
    }
};

pub CompUnit: Vec<Item> = <Item*>;

Item: Item = {
    <Decl> => Item { kind: ItemKind::Global(<>) },
    <Func> => Item { kind: ItemKind::Func(<>) },
}

Func: Func = {
    <i:FuncHead> <p: Comma<Param>> ")" <b:Block> => {
        Func::new(i.1, i.0, p, b)
    },
    <i:FuncHead> ")" <b:Block> => {
        Func::new(i.1, i.0, vec![], b)
    },
}

FuncHead: (Ty, String) = {
    "int" <IDENT> "(" => (Ty::Int, <>),
    "void" <IDENT> "(" => (Ty::Void, <>),
}

Param: Param = "int" <ident:IDENT> => Param { ty: Ty::Int, ident };

Decl: Vec<Decl> = {
    "const" "int" <v: Comma<ConstDef>> ";" => {
        v.into_iter().map(|(ident, constexp)| {
            Decl {
                ident,
                exp: Some(constexp),
                ty: Ty::Int,
                kind: SymKind::Const,
            }
        }).collect()
    },
    "int" <v: Comma<VarDef>> ";" => {
        v.into_iter().map(|(ident, exp)| {
            Decl {
                ident,
                exp,
                ty: Ty::Int,
                kind: SymKind::Var,
            }
        }).collect()
    },
}

ConstDef: (String, Exp) = <IDENT> "=" <ConstExp>;

VarDef: (String, Option<Exp>) = <IDENT> <("=" <VarExp>)?>;

Block: Block = "{" <BlockItem*> "}" => Block(<>);

BlockItem: BlockItem = {
    <Stmt> => BlockItem::Stmt(<>),
    <Decl> => BlockItem::Decl(<>),
}

Stmt: Stmt = {
    OpenStmt,
    ClosedStmt,
}

OpenStmt: Stmt = {
    IfStmt,
    OpenIfElseStmt,
    OpenWhileStmt,
}

ClosedStmt: Stmt = {
    NonIfStmt,
    ClosedIfElseStmt,
    ClosedWhileStmt,
}

NonIfStmt: Stmt = {
    UnitStmt,
    ExpStmt,
    BlockStmt,
    AssignStmt,
    BreakStmt,
    ContinueStmt,
    ReturnStmt,
}

UnitStmt: Stmt = ";" => Stmt { kind: StmtKind::Unit };

ExpStmt: Stmt = <Exp> ";" => Stmt { kind: StmtKind::Exp(<>) };

BlockStmt: Stmt = <Block> => Stmt { kind: StmtKind::Block(<>) };

AssignStmt: Stmt = <LVal> "=" <Exp> ";" => Stmt { kind: StmtKind::Assign(<>) };

IfStmt: Stmt = "if" "(" <e: Exp> ")" <t: Stmt> => Stmt { kind: StmtKind::If(e, Box::new(t), None) };

OpenIfElseStmt: Stmt = "if" "(" <e: Exp> ")" <t: ClosedStmt> "else" <a: OpenStmt> => Stmt { kind: StmtKind::If(e, Box::new(t), Some(Box::new(a))) };

ClosedIfElseStmt: Stmt = "if" "(" <e: Exp> ")" <t: ClosedStmt> "else" <a: ClosedStmt> => Stmt { kind: StmtKind::If(e, Box::new(t), Some(Box::new(a))) };

OpenWhileStmt: Stmt = "while" "(" <e: Exp> ")" <t: OpenStmt> => Stmt { kind: StmtKind::While(e, Box::new(t)) };

ClosedWhileStmt: Stmt = "while" "(" <e: Exp> ")" <t: ClosedStmt> => Stmt { kind: StmtKind::While(e, Box::new(t)) };

BreakStmt: Stmt = "break" ";" => Stmt { kind: StmtKind::Break };

ContinueStmt: Stmt = "continue" ";" => Stmt { kind: StmtKind::Continue };

ReturnStmt: Stmt = {
    "return" <r:Exp> ";" => Stmt { kind: StmtKind::Return(Some(r)) },
    "return" ";" => Stmt { kind: StmtKind::Return(None)},
}

LVal: LVal = IDENT => LVal(<>);

Exp: Exp = LOrExp => Exp(<>);

ConstExp: Exp = Exp;

VarExp: Exp = Exp;

PrimaryExp: PrimaryExp = {
    "(" <Exp> ")" => PrimaryExp::Exp(Box::new(<>)),
    LVal => PrimaryExp::LVal(<>),
    Number
}

Number: PrimaryExp = {
    r"[1-9][0-9]*|0" => PrimaryExp::literal(<>, 10, 0),
    r"0[0-7]+" => PrimaryExp::literal(<>, 8, 1),
    r"0[xX][0-9a-fA-F]+" => PrimaryExp::literal(<>, 16, 2),
}

UnaryExp: UnaryExp = {
    PrimaryExp => UnaryExp::Primary(<>),
    <o:UnaryOp> <e:UnaryExp> => UnaryExp::Unary(o, Box::new(e)),
    "+" <UnaryExp>,
    <i:IDENT> "(" <p:Comma<Exp>> ")" => UnaryExp::Call(i, p.into_iter().map(Box::new).collect()),
    <i:IDENT> "(" ")" => UnaryExp::Call(i, vec![]),
}

UnaryOp: UnaryOp = {
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::LNot,
}

MulExp: MulExp = {
    <UnaryExp> => MulExp::Unary(<>),
    <l:MulExp> <o:MulOp> <r:UnaryExp> => MulExp::Binary(Box::new(l), o, r),
}

MulOp: MulOp = {
    "*" => MulOp::Mul,
    "/" => MulOp::Div,
    "%" => MulOp::Mod,
}

AddExp: AddExp = {
    <MulExp> => AddExp::Unary(<>),
    <l:AddExp> <o:AddOp> <r:MulExp> => AddExp::Binary(Box::new(l), o, r),
}

AddOp: AddOp = {
    "+" => AddOp::Add,
    "-" => AddOp::Sub,
}

RelExp: RelExp = {
    <AddExp> => RelExp::Unary(<>),
    <l:RelExp> <o:RelOp> <r:AddExp> => RelExp::Binary(Box::new(l), o, r),
}

RelOp: RelOp = {
    "<" => RelOp::Lt,
    ">" => RelOp::Gt,
    "<=" => RelOp::Le,
    ">=" => RelOp::Ge,
}

EqExp: EqExp = {
    <RelExp> => EqExp::Unary(<>),
    <l:EqExp> <o:EqOp> <r:RelExp> => EqExp::Binary(Box::new(l), o, r),
}

EqOp: EqOp = {
    "==" => EqOp::Eq,
    "!=" => EqOp::Ne,
}

LAndExp: LAndExp = {
    <EqExp> => LAndExp::Unary(<>),
    <l:LAndExp> "&&" <r:EqExp> => LAndExp::Binary(Box::new(l), r),
}

LOrExp: LOrExp = {
    <LAndExp> => LOrExp::Unary(<>),
    <l:LOrExp> "||" <r:LAndExp> => LOrExp::Binary(Box::new(l), r),
}

IDENT: String = r"[A-Za-z_][A-Za-z0-9_]*" => <>.to_string();

FUNC_TYPE: &'input str = {
    "int",
    "void",
}
