use crate::front::ast::*;

grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*[^*]*(\*([^*/][^*]*)?)*\*/" => {},
    _
}

// r"//([^!\n\r][^\n\r]*[\n\r]*)+" => {},

pub CompUnit: Vec<Item> = <Item*>;

Item: Item = {
    <f: Func> => Item { kind: ItemKind::Func(f) }
}

Func: Func = {
    <t:FUNC_TYPE> <i:IDENT> "(" ")" "{" <b:Block> "}" => {
        Func::new(i, t, b)
    }
}

Block: Vec<Stmt> = <Stmt*>;

Stmt: Stmt = {
    ReturnStmt,
}

ReturnStmt: Stmt = {
    "return" <r:INT_LITERAL> ";" => Stmt { kind: StmtKind::Return(r) }
}

IDENT: String = r"[A-Za-z_][A-Za-z0-9_]+" => <>.to_string();

FUNC_TYPE: String = "int" => <>.to_string();

pub INT_LITERAL: i32 = {
    r"(-|\+)?([1-9][0-9]*|0)" => to_int_literal(<>, 10, 0),
    r"0[0-7]+" => to_int_literal(<>, 8, 1),
    r"0[xX][0-9a-fA-F]+" => to_int_literal(<>, 16, 2),
}