use crate::front::ast::*;

grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*[^*]*(\*([^*/][^*]*)?)*\*/" => {},
    _
}

// r"//([^!\n\r][^\n\r]*[\n\r]*)+" => {},

pub CompUnit: Vec<Item> = <Item*>;

Item: Item = {
    <f: Func> => Item { kind: ItemKind::Func(f) }
}

Func: Func = {
    <t:FUNC_TYPE> <i:IDENT> "(" ")" "{" <b:Block> "}" => {
        Func::new(i, t, b)
    }
}

Block: Vec<Stmt> = <Stmt*>;

Stmt: Stmt = {
    ReturnStmt,
}

ReturnStmt: Stmt = {
    "return" <r:Exp> ";" => Stmt { kind: StmtKind::Return(r) }
}

Exp: Exp = LOrExp => Exp(<>);

PrimaryExp: PrimaryExp = {
    "(" <Exp> ")" => PrimaryExp::Exp(Box::new(<>)),
    r"(-|\+)?([1-9][0-9]*|0)" => PrimaryExp::literal(<>, 10, 0),
    r"0[0-7]+" => PrimaryExp::literal(<>, 8, 1),
    r"0[xX][0-9a-fA-F]+" => PrimaryExp::literal(<>, 16, 2),
}

UnaryExp: UnaryExp = {
    PrimaryExp => UnaryExp::Primary(<>),
    <o:UnaryOp> <e:UnaryExp> => UnaryExp::Unary(o, Box::new(e)),
    "+" <UnaryExp>,
}

UnaryOp: UnaryOp = {
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::LNot,
}

MulExp: MulExp = {
    <UnaryExp> => MulExp::Unary(<>),
    <l:MulExp> <o:MulOp> <r:UnaryExp> => MulExp::Binary(Box::new(l), o, r),
}

MulOp: MulOp = {
    "*" => MulOp::Mul,
    "/" => MulOp::Div,
    "%" => MulOp::Mod,
}

AddExp: AddExp = {
    <MulExp> => AddExp::Unary(<>),
    <l:AddExp> <o:AddOp> <r:MulExp> => AddExp::Binary(Box::new(l), o, r),
}

AddOp: AddOp = {
    "+" => AddOp::Add,
    "-" => AddOp::Sub,
}

RelExp: RelExp = {
    <AddExp> => RelExp::Unary(<>),
    <l:RelExp> <o:RelOp> <r:AddExp> => RelExp::Binary(Box::new(l), o, r),
}

RelOp: RelOp = {
    "<" => RelOp::Lt,
    ">" => RelOp::Gt,
    "<=" => RelOp::Le,
    ">=" => RelOp::Ge,
}

EqExp: EqExp = {
    <RelExp> => EqExp::Unary(<>),
    <l:EqExp> <o:EqOp> <r:RelExp> => EqExp::Binary(Box::new(l), o, r),
}

EqOp: EqOp = {
    "==" => EqOp::Eq,
    "!=" => EqOp::Ne,
}

LAndExp: LAndExp = {
    <EqExp> => LAndExp::Unary(<>),
    <l:LAndExp> "&&" <r:EqExp> => LAndExp::Binary(Box::new(l), r),
}

LOrExp: LOrExp = {
    <LAndExp> => LOrExp::Unary(<>),
    <l:LOrExp> "||" <r:LAndExp> => LOrExp::Binary(Box::new(l), r),
}

IDENT: String = r"[A-Za-z_][A-Za-z0-9_]+" => <>.to_string();

FUNC_TYPE: String = "int" => <>.to_string();
